#! /bin/bash

# Copyright 1999-2005 Gentoo Foundation
# $Header$

# revdep-rebuild: Reverse dependency rebuilder.
# Original Author: Stanislav Brabec
# Current Maintainer: Paul Varner <fuzzyray@gentoo.org>

PRELIMINARY_SEARCH_DIRS="$PRELIMINARY_SEARCH_DIRS /bin /sbin /usr/bin /usr/sbin /lib* /usr/lib*"
PRELIMINARY_SEARCH_DIRS_MASK="$PRELIMINARY_SEARCH_DIRS_MASK /opt/OpenOffice"
PRELIMINARY_LD_LIBRARY_MASK="$PRELIMINARY_LD_LIBRARY_MASK libodbcinst.so libodbc.so libjava.so libjvm.so"


# Get the directories from /etc/ld.so.conf
if [ -e /etc/ld.so.conf ]
then
    PRELIMINARY_SEARCH_DIRS="$PRELIMINARY_SEARCH_DIRS $(grep -v "^#" /etc/ld.so.conf | tr 'n' ' ')"
fi    

# Set the final variables
# Note: Using $(echo $variable) removes extraneous spaces from variable assignment
unset SEARCH_DIRS
for i in $(echo $PRELIMINARY_SEARCH_DIRS)
do
    [ "$i" = "-*" ] && break
    SEARCH_DIRS="$(echo $SEARCH_DIRS $(readlink -f $i))"
done

unset SEARCH_DIRS_MASK
for i in $(echo $PRELIMINARY_SEARCH_DIRS_MASK)
do
    [ "$i" = "-*" ] && break
    SEARCH_DIRS_MASK="$(echo $SEARCH_DIRS_MASK $i)"
done

unset LD_LIBRARY_MASK
for i in $(echo $PRELIMINARY_LD_LIBRARY_MASK)
do
    [ "$i" = "-*" ] && break
    LD_LIBRARY_MASK="$(echo $LD_LIBRARY_MASK $i)"
done

# Use the color preference from portage
##NOCOLOR=$(portageq envvar NOCOLOR)

# Base of temporary files names.
LIST=~/.revdep-rebuild

shopt -s nullglob
shopt -s expand_aliases
unalias -a

# Color Definitions
NO="x1b[0m"
BR="x1b[0;01m"
CY="x1b[36;01m"
GR="x1b[32;01m"
RD="x1b[31;01m"
YL="x1b[33;01m"
BL="x1b[34;01m"

alias echo_v=echo

PACKAGE_NAMES=false
SONAME="not found"
SONAME_GREP=grep
SEARCH_BROKEN=true
EXTRA_VERBOSE=false
KEEP_TEMP=false

EMERGE_OPTIONS=""
PRELIMINARY_CALLED_OPTIONS=""
while [ ! -z "$1" ] ; do
    case "$1" in
    -X | --package-names )
        PACKAGE_NAMES=true
        PRELIMINARY_CALLED_OPTIONS="${PRELIMINARY_CALLED_OPTIONS} --package_names"
        shift
        ;;
    -q | --quiet )
        alias echo_v=:
        EMERGE_OPTIONS="${EMERGE_OPTIONS} $1"
        shift
        ;;
    --library=* | --soname=* | --soname-regexp=* )
        SONAME="${1#*=}"
        SEARCH_BROKEN=false
        PRELIMINARY_CALLED_OPTIONS="${PRELIMINARY_CALLED_OPTIONS} --library=${SONAME}"
        shift
        ;;
    --library | --soname | --soname-regexp )
        SONAME="$2"
        SEARCH_BROKEN=false
        PRELIMINARY_CALLED_OPTIONS="${PRELIMINARY_CALLED_OPTIONS} --library=${SONAME}"
        shift 2
        ;;
    -nc | --no-color )
        NOCOLOR=true
        shift
        ;;
    -i | --ignore )
        rm -f ${LIST}*
        shift
        ;;
    --keep-temp )
        KEEPTEMP=true
        shift
        ;;
    -vv | --extra-verbose )
        EXTRA_VERBOSE=true
        shift
        ;;
    -- )
        shift
        ;;
    * )
        EMERGE_OPTIONS="${EMERGE_OPTIONS} $1"
        shift
        ;;
    esac
done

EMERGE_OPTIONS=$(echo $EMERGE_OPTIONS | sed 's/^ //')

if [ -z "$PRELIMINARY_CALLED_OPTIONS" ]
then
    CALLED_OPTIONS=""
else
    for i in $(echo $PRELIMINARY_CALLED_OPTIONS | tr ' ' 'n'| sort)
    do
        CALLED_OPTIONS="$(echo $CALLED_OPTIONS $i)"
    done
fi

if [ "$NOCOLOR" = "yes" -o "$NOCOLOR" = "true" ]
then
    NOCOLOR=true
else
    NOCOLOR=false
fi

# Make the NOCOLOR variable visible to emerge
export NOCOLOR

if $NOCOLOR
then
    NO=""
    BR=""
    CY=""
    GR=""
    RD=""
    YL=""
    BL=""
fi

function set_trap () {
    trap "rm_temp $1" SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM
}

function rm_temp () {
    echo " terminated."
    echo "Removing incomplete $1."
    rm $1
    echo
    exit 1
}

if $SEARCH_BROKEN ; then
    SONAME_SEARCH="$SONAME"
    LLIST=$LIST
    HEAD_TEXT="broken by a package update"
    OK_TEXT="Dynamic linking on your system is consistent"
    WORKING_TEXT=" consistency"
else
    # first case is needed to test against /path/to/foo.so
    if [ ${SONAME:0:1} == '/' ] ; then 
        # Set to "<space>$SONAME<space>"
        SONAME_SEARCH=" $SONAME "
    else
        # Set to "<tab>$SONAME<space>"
        SONAME_SEARCH="    $SONAME "
    fi
    LLIST=${LIST}_$(echo "$SONAME_SEARCH$SONAME" | md5sum | head -c 8)
    HEAD_TEXT="using $SONAME"
    OK_TEXT="There are no dynamic links to $SONAME"
    WORKING_TEXT=""
fi

# If our temporary files are older than 1 day, don't use them
TOO_OLD=$((`date +%s` - 86400))
for file in ${LIST}*
do
    if [ -f $file ]
    then
        FILE_AGE="$(stat -c %Y $file)"
        if [ $FILE_AGE -lt $TOO_OLD ]
        then
            rm -f ${LIST}*
            break
        fi
    fi
done

# Don't use our previous files if environment doesn't match
if [ -f $LIST.0_env ]
then
    PREVIOUS_SEARCH_DIRS=$(. ${LIST}.0_env; echo "$SEARCH_DIRS")
    PREVIOUS_SEARCH_DIRS_MASK=$(. ${LIST}.0_env; echo "$SEARCH_DIRS_MASK")
    PREVIOUS_LD_LIBRARY_MASK=$(. ${LIST}.0_env; echo "$LD_LIBRARY_MASK")
    PREVIOUS_OPTIONS=$(. ${LIST}.0_env; echo "$CALLED_OPTIONS")
    if [ "$PREVIOUS_SEARCH_DIRS" != "$SEARCH_DIRS" ] || 
       [ "$PREVIOUS_SEARCH_DIRS_MASK" != "$SEARCH_DIRS_MASK" ] || 
       [ "$PREVIOUS_LD_LIBRARY_MASK" != "$LD_LIBRARY_MASK" ] || 
       [ "$PREVIOUS_OPTIONS" != "$CALLED_OPTIONS" ] 
    then
        echo
        echo "Environment mismatch from previous run, deleting temporary files..."
        rm -f ${LIST}*
    fi
fi

# Log our environment
echo "SEARCH_DIRS="$SEARCH_DIRS"" > $LIST.0_env
echo "SEARCH_DIRS_MASK="$SEARCH_DIRS_MASK"" >> $LIST.0_env
echo "LD_LIBRARY_MASK="$LD_LIBRARY_MASK"" >> $LIST.0_env
echo "CALLED_OPTIONS="$CALLED_OPTIONS"" >> $LIST.0_env
echo "EMERGE_OPTIONS="$EMERGE_OPTIONS"" >> $LIST.0_env

if $EXTRA_VERBOSE
then
    echo
    echo "revdep-rebuild environment:"
    cat $LIST.0_env
fi

echo
echo "Checking reverse dependencies..."
echo

echo
echo -n -e "${GR}Collecting system binaries and libraries...${NO}"

if [ -f $LIST.1_files ]
then
    echo " using existing $LIST.1_files."
else
    # Be safe and remove any extraneous temporary files
    rm -f ${LIST}.[1-9]_*

    set_trap "$LIST.1_*"

    find $SEARCH_DIRS -type f ( -perm +u+x -o -name '*.so' -o -name '*.so.*' ) 2>/dev/null | sort | uniq >$LIST.0_files

    # Remove files that match SEARCH_DIR_MASK
    for dir in $SEARCH_DIRS_MASK
    do
        grep -v "^$dir" $LIST.0_files > $LIST.1_files
        mv $LIST.1_files $LIST.0_files
    done
    
    mv $LIST.0_files $LIST.1_files
    echo -e " done.n  ($LIST.1_files)"
fi

if $SEARCH_BROKEN ; then
    echo
    echo -n -e "${GR}Collecting complete LD_LIBRARY_PATH...${NO}"
    if [ -f $LIST.2_ldpath ] ; then
        echo " using existing $LIST.2_ldpath."
    else
        set_trap "$LIST.2_ldpath"
        # Ensure that the "trusted" lib directories are at the start of the path
        (
            echo /lib* /usr/lib* | sed 's/ /:/g'
            sed '/^#/d;s/#.*$//' </etc/ld.so.conf
            sed 's:/[^/]*$::' <$LIST.1_files | sort -ru
        ) | tr 'n' : | tr -d 'r' | sed 's/:$//' >$LIST.2_ldpath
        echo -e " done.n  ($LIST.2_ldpath)"
    fi
    export COMPLETE_LD_LIBRARY_PATH="$(cat $LIST.2_ldpath)"
fi

echo
echo -n -e "${GR}Checking dynamic linking$WORKING_TEXT...${NO}"
if [ -f $LLIST.3_rebuild ] ; then
    echo " using existing $LLIST.3_rebuild."
else
    echo_v
    set_trap "$LLIST.3_rebuild"
    LD_MASK="\(    $(echo "$LD_LIBRARY_MASK" | sed 's/./\./g;s/ / \|    /g') \)"
    echo -n >$LLIST.3_rebuild
    cat $LIST.1_files | while read FILE ; do
    # Note: double checking seems to be faster than single
    # with complete path (special add ons are rare).
    if ldd "$FILE" 2>/dev/null | grep -v "$LD_MASK" | $SONAME_GREP -q "$SONAME_SEARCH" ; then
        if $SEARCH_BROKEN ; then
            if LD_LIBRARY_PATH="$COMPLETE_LD_LIBRARY_PATH" ldd "$FILE" 2>/dev/null | grep -v "$LD_MASK" | $SONAME_GREP -q "$SONAME_SEARCH" ; then
                # FIX: I hate duplicating code
                # Only build missing direct dependencies
                ALL_MISSING_LIBS=$(ldd "$FILE" 2>/dev/null | sort -u | sed -n 's/    (.*) => not found$/1/p' | tr 'n' ' ' | sed 's/ $//' )
                REQUIRED_LIBS=$(objdump -x $FILE | grep NEEDED | awk '{print $2}' | tr 'n' ' ' | sed 's/ $//')
                MISSING_LIBS=""
                for lib in $ALL_MISSING_LIBS
                do
                    if echo $REQUIRED_LIBS | grep -q $lib
                    then
                        MISSING_LIBS="$MISSING_LIBS $lib"
                    fi
                done
                if [ "$MISSING_LIBS" != "" ]
                then
                    echo "$FILE" >>$LLIST.3_rebuild
                    echo_v "  broken $FILE (requires ${MISSING_LIBS})"
                fi
            fi
        else
            # FIX: I hate duplicating code
            # Only rebuild for direct dependencies
            ALL_MISSING_LIBS=$(ldd "$FILE" 2>/dev/null | sort -u | $SONAME_GREP "$SONAME_SEARCH" | awk '{print $1}' | tr 'n' ' ' | sed 's/ $//' )
            REQUIRED_LIBS=$(objdump -x $FILE | grep NEEDED | awk '{print $2}' | tr 'n' ' ' | sed 's/ $//')
            MISSING_LIBS=""
            for lib in $ALL_MISSING_LIBS
            do
                if echo $REQUIRED_LIBS | grep -q $lib
                then
                    MISSING_LIBS="$MISSING_LIBS $lib"
                fi
            done
            if [ "$MISSING_LIBS" != "" ]
            then
                echo "$FILE" >>$LLIST.3_rebuild
                echo_v "  found $FILE"
            fi
        fi
    fi
    done
    echo -e " done.n  ($LLIST.3_rebuild)"
fi

if $PACKAGE_NAMES ; then
    EXACT_EBUILDS=false

else
    EXACT_EBUILDS=true

fi

trap - SIGHUP SIGINT SIGQUIT SIGABRT SIGTERM

if [ -z "$REBUILD_LIST" ] ; then
    echo -e "n${GR}$OK_TEXT... All done.${NO} "
    if [ ! $KEEPTEMP ]
    then
        rm $LIST.[0-2]_*
        rm $LLIST.[3-9]_*
    fi
    exit 0
fi
exit 0
